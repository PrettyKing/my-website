"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3463],{5680:(n,e,t)=>{t.d(e,{xA:()=>p,yg:()=>h});var o=t(6540);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,o)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,o,i=function(n,e){if(null==n)return{};var t,o,i={},r=Object.keys(n);for(o=0;o<r.length;o++)t=r[o],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(o=0;o<r.length;o++)t=r[o],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var c=o.createContext({}),l=function(n){var e=o.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},p=function(n){var e=l(n.components);return o.createElement(c.Provider,{value:e},n.children)},d="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return o.createElement(o.Fragment,{},e)}},g=o.forwardRef((function(n,e){var t=n.components,i=n.mdxType,r=n.originalType,c=n.parentName,p=a(n,["components","mdxType","originalType","parentName"]),d=l(t),g=i,h=d["".concat(c,".").concat(g)]||d[g]||u[g]||r;return t?o.createElement(h,s(s({ref:e},p),{},{components:t})):o.createElement(h,s({ref:e},p))}));function h(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var r=t.length,s=new Array(r);s[0]=g;var a={};for(var c in e)hasOwnProperty.call(e,c)&&(a[c]=e[c]);a.originalType=n,a[d]="string"==typeof n?n:i,s[1]=a;for(var l=2;l<r;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},5793:(n,e,t)=>{t.r(e),t.d(e,{contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var o=t(8168),i=(t(6540),t(5680));const r={title:"C++ \u901f\u6210",date:new Date("2021-01-20T00:00:00.000Z"),tags:["tools"],categories:["\u5de5\u5177\u4eba"]},s="[X\u5206\u949f\u901f\u6210Y](https://learnxinyminutes.com/)",a={unversionedId:"other/CPP",id:"other/CPP",isDocsHomePage:!1,title:"C++ \u901f\u6210",description:"\u5176\u4e2d Y=c++",source:"@site/docs/other/CPP.md",sourceDirName:"other",slug:"/other/CPP",permalink:"/my-website/docs/other/CPP",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/other/CPP.md",version:"current",frontMatter:{title:"C++ \u901f\u6210",date:"2021-01-20T00:00:00.000Z",tags:["tools"],categories:["\u5de5\u5177\u4eba"]},sidebar:"defaultSidebar",previous:{title:"C\u8bed\u8a00\u901f\u6210",permalink:"/my-website/docs/other/C"},next:{title:"Docker \u955c\u50cf\u6253\u5305\u548c\u53d1\u5e03\u57fa\u672c\u6d41\u7a0b",permalink:"/my-website/docs/other/docker-publish"}},c=[{value:"\u5176\u4e2d Y=c++",id:"\u5176\u4e2d-yc",children:[]}],l={toc:c},p="wrapper";function d(n){let{components:e,...t}=n;return(0,i.yg)(p,(0,o.A)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"x\u5206\u949f\u901f\u6210y"},(0,i.yg)("a",{parentName:"h1",href:"https://learnxinyminutes.com/"},"X\u5206\u949f\u901f\u6210Y")),(0,i.yg)("h2",{id:"\u5176\u4e2d-yc"},"\u5176\u4e2d Y=c++"),(0,i.yg)("p",null,"\u6e90\u4ee3\u7801\u4e0b\u8f7d\uff1a ",(0,i.yg)("a",{parentName:"p",href:"https://learnxinyminutes.com/docs/files/learncpp-cn.cpp"},"learncpp-cn.cpp")),(0,i.yg)("p",null,"C++\u662f\u4e00\u79cd\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u3002\u7528\u5b83\u7684\u53d1\u660e\u8005\uff0c ",(0,i.yg)("a",{parentName:"p",href:"http://channel9.msdn.com/Events/Lang-NEXT/Lang-NEXT-2014/Keynote"},"Bjarne Stroustrup\u7684\u8bdd"),"\u6765\u8bf4\uff0cC++\u7684\u8bbe\u8ba1\u76ee\u6807\u662f\uff1a"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"\u6210\u4e3a\u201c\u66f4\u597d\u7684C\u8bed\u8a00\u201d"),(0,i.yg)("li",{parentName:"ul"},"\u652f\u6301\u6570\u636e\u7684\u62bd\u8c61\u4e0e\u5c01\u88c5"),(0,i.yg)("li",{parentName:"ul"},"\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b"),(0,i.yg)("li",{parentName:"ul"},"\u652f\u6301\u6cdb\u578b\u7f16\u7a0b")),(0,i.yg)("p",null,"C++\u63d0\u4f9b\u4e86\u5bf9\u786c\u4ef6\u7684\u7d27\u5bc6\u63a7\u5236\uff08\u6b63\u5982C\u8bed\u8a00\u4e00\u6837\uff09\uff0c \u80fd\u591f\u7f16\u8bd1\u4e3a\u673a\u5668\u8bed\u8a00\uff0c\u7531\u5904\u7406\u5668\u76f4\u63a5\u6267\u884c\u3002 \u4e0e\u6b64\u540c\u65f6\uff0c\u5b83\u4e5f\u63d0\u4f9b\u4e86\u6cdb\u578b\u3001\u5f02\u5e38\u548c\u7c7b\u7b49\u9ad8\u5c42\u529f\u80fd\u3002 \u867d\u7136C++\u7684\u8bed\u6cd5\u53ef\u80fd\u6bd4\u67d0\u4e9b\u51fa\u73b0\u8f83\u665a\u7684\u8bed\u8a00\u66f4\u590d\u6742\uff0c\u5b83\u4ecd\u7136\u5f97\u5230\u4e86\u4eba\u4eec\u7684\u9752\u775e\u2014\u2014 \u529f\u80fd\u4e0e\u901f\u5ea6\u7684\u5e73\u8861\u4f7fC++\u6210\u4e3a\u4e86\u76ee\u524d\u5e94\u7528\u6700\u5e7f\u6cdb\u7684\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\u4e4b\u4e00\u3002"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cpp"},'////////////////\n// \u4e0eC\u8bed\u8a00\u7684\u6bd4\u8f83\n////////////////\n\n// C++_\u51e0\u4e4e_\u662fC\u8bed\u8a00\u7684\u4e00\u4e2a\u8d85\u96c6\uff0c\u5b83\u4e0eC\u8bed\u8a00\u7684\u57fa\u672c\u8bed\u6cd5\u6709\u8bb8\u591a\u76f8\u540c\u4e4b\u5904\uff0c\n// \u4f8b\u5982\u53d8\u91cf\u548c\u51fd\u6570\u7684\u58f0\u660e\uff0c\u539f\u751f\u6570\u636e\u7c7b\u578b\u7b49\u7b49\u3002\n\n// \u548cC\u8bed\u8a00\u4e00\u6837\uff0c\u5728C++\u4e2d\uff0c\u4f60\u7684\u7a0b\u5e8f\u4f1a\u4ecemain()\u5f00\u59cb\u6267\u884c\uff0c\n// \u8be5\u51fd\u6570\u7684\u8fd4\u56de\u503c\u5e94\u5f53\u4e3aint\u578b\uff0c\u8fd9\u4e2a\u8fd4\u56de\u503c\u4f1a\u4f5c\u4e3a\u7a0b\u5e8f\u7684\u9000\u51fa\u72b6\u6001\u503c\u3002\n// \u4e0d\u8fc7\uff0c\u5927\u591a\u6570\u7684\u7f16\u8bd1\u5668\uff08gcc\uff0cclang\u7b49\uff09\u4e5f\u63a5\u53d7 void main() \u7684\u51fd\u6570\u539f\u578b\u3002\n// \uff08\u53c2\u89c1 http://en.wikipedia.org/wiki/Exit_status \u6765\u83b7\u53d6\u66f4\u591a\u4fe1\u606f\uff09\nint main(int argc, char** argv)\n{\n    // \u548cC\u8bed\u8a00\u4e00\u6837\uff0c\u547d\u4ee4\u884c\u53c2\u6570\u901a\u8fc7argc\u548cargv\u4f20\u9012\u3002\n    // argc\u4ee3\u8868\u547d\u4ee4\u884c\u53c2\u6570\u7684\u6570\u91cf\uff0c\n    // \u800cargv\u662f\u4e00\u4e2a\u5305\u542b\u201cC\u8bed\u8a00\u98ce\u683c\u5b57\u7b26\u4e32\u201d\uff08char *\uff09\u7684\u6570\u7ec4\uff0c\n    // \u5176\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4ee3\u8868\u4e00\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\u7684\u5185\u5bb9\uff0c\n    // \u9996\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\u662f\u8c03\u7528\u8be5\u7a0b\u5e8f\u65f6\u6240\u4f7f\u7528\u7684\u540d\u79f0\u3002\n    // \u5982\u679c\u4f60\u4e0d\u5173\u5fc3\u547d\u4ee4\u884c\u53c2\u6570\u7684\u503c\uff0cargc\u548cargv\u53ef\u4ee5\u88ab\u5ffd\u7565\u3002\n    // \u6b64\u65f6\uff0c\u4f60\u53ef\u4ee5\u7528int main()\u4f5c\u4e3a\u51fd\u6570\u539f\u578b\u3002\n\n    // \u9000\u51fa\u72b6\u6001\u503c\u4e3a0\u65f6\uff0c\u8868\u793a\u7a0b\u5e8f\u6267\u884c\u6210\u529f\n    return 0;\n}\n\n// \u7136\u800c\uff0cC++\u548cC\u8bed\u8a00\u4e5f\u6709\u4e00\u4e9b\u533a\u522b\uff1a\n\n// \u5728C++\u4e2d\uff0c\u5b57\u7b26\u5b57\u9762\u91cf\u7684\u5927\u5c0f\u662f\u4e00\u4e2a\u5b57\u8282\u3002\nsizeof(\'c\') == 1\n\n// \u5728C\u8bed\u8a00\u4e2d\uff0c\u5b57\u7b26\u5b57\u9762\u91cf\u7684\u5927\u5c0f\u4e0eint\u76f8\u540c\u3002\nsizeof(\'c\') == sizeof(10)\n\n\n// C++\u7684\u51fd\u6570\u539f\u578b\u4e0e\u51fd\u6570\u5b9a\u4e49\u662f\u4e25\u683c\u5339\u914d\u7684\nvoid func(); // \u8fd9\u4e2a\u51fd\u6570\u4e0d\u80fd\u63a5\u53d7\u4efb\u4f55\u53c2\u6570\n\n// \u800c\u5728C\u8bed\u8a00\u4e2d\nvoid func(); // \u8fd9\u4e2a\u51fd\u6570\u80fd\u63a5\u53d7\u4efb\u610f\u6570\u91cf\u7684\u53c2\u6570\n\n// \u5728C++\u4e2d\uff0c\u7528nullptr\u4ee3\u66ffC\u8bed\u8a00\u4e2d\u7684NULL\nint* ip = nullptr;\n\n// C++\u4e5f\u53ef\u4ee5\u4f7f\u7528C\u8bed\u8a00\u7684\u6807\u51c6\u5934\u6587\u4ef6\uff0c\n// \u4f46\u662f\u9700\u8981\u52a0\u4e0a\u524d\u7f00\u201cc\u201d\u5e76\u53bb\u6389\u672b\u5c3e\u7684\u201c.h\u201d\u3002\n#include <cstdio>\n\nint main()\n{\n    printf("Hello, world!\\n");\n    return 0;\n}\n\n///////////\n// \u51fd\u6570\u91cd\u8f7d\n///////////\n\n// C++\u652f\u6301\u51fd\u6570\u91cd\u8f7d\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u7ec4\u540d\u79f0\u76f8\u540c\u800c\u53c2\u6570\u4e0d\u540c\u7684\u51fd\u6570\u3002\n\nvoid print(char const* myString)\n{\n    printf("String %s\\n", myString);\n}\n\nvoid print(int myInt)\n{\n    printf("My int is %d", myInt);\n}\n\nint main()\n{\n    print("Hello"); // \u89e3\u6790\u4e3a void print(const char*)\n    print(15); // \u89e3\u6790\u4e3a void print(int)\n}\n\n///////////////////\n// \u51fd\u6570\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\n///////////////////\n\n// \u4f60\u53ef\u4ee5\u4e3a\u51fd\u6570\u7684\u53c2\u6570\u6307\u5b9a\u9ed8\u8ba4\u503c\uff0c\n// \u5b83\u4eec\u5c06\u4f1a\u5728\u8c03\u7528\u8005\u6ca1\u6709\u63d0\u4f9b\u76f8\u5e94\u53c2\u6570\u65f6\u88ab\u4f7f\u7528\u3002\n\nvoid doSomethingWithInts(int a = 1, int b = 4)\n{\n    // \u5bf9\u4e24\u4e2a\u53c2\u6570\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\n}\n\nint main()\n{\n    doSomethingWithInts();      // a = 1,  b = 4\n    doSomethingWithInts(20);    // a = 20, b = 4\n    doSomethingWithInts(20, 5); // a = 20, b = 5\n}\n\n// \u9ed8\u8ba4\u53c2\u6570\u5fc5\u987b\u653e\u5728\u6240\u6709\u7684\u5e38\u89c4\u53c2\u6570\u4e4b\u540e\u3002\n\nvoid invalidDeclaration(int a = 1, int b) // \u8fd9\u662f\u9519\u8bef\u7684\uff01\n{\n}\n\n\n///////////\n// \u547d\u540d\u7a7a\u95f4\n///////////\n\n// \u547d\u540d\u7a7a\u95f4\u4e3a\u53d8\u91cf\u3001\u51fd\u6570\u548c\u5176\u4ed6\u58f0\u660e\u63d0\u4f9b\u4e86\u5206\u79bb\u7684\u7684\u4f5c\u7528\u57df\u3002\n// \u547d\u540d\u7a7a\u95f4\u53ef\u4ee5\u5d4c\u5957\u4f7f\u7528\u3002\n\nnamespace First {\n    namespace Nested {\n        void foo()\n        {\n            printf("This is First::Nested::foo\\n");\n        }\n    } // \u7ed3\u675f\u5d4c\u5957\u7684\u547d\u540d\u7a7a\u95f4Nested\n} // \u7ed3\u675f\u547d\u540d\u7a7a\u95f4First\n\nnamespace Second {\n    void foo()\n    {\n        printf("This is Second::foo\\n")\n    }\n}\n\nvoid foo()\n{\n    printf("This is global foo\\n");\n}\n\nint main()\n{\n    // \u5982\u679c\u6ca1\u6709\u7279\u522b\u6307\u5b9a\uff0c\u5c31\u4ece\u201cSecond\u201d\u4e2d\u53d6\u5f97\u6240\u9700\u7684\u5185\u5bb9\u3002\n    using namespace Second;\n\n    foo(); // \u663e\u793a\u201cThis is Second::foo\u201d\n    First::Nested::foo(); // \u663e\u793a\u201cThis is First::Nested::foo\u201d\n    ::foo(); // \u663e\u793a\u201cThis is global foo\u201d\n}\n\n////////////\n// \u8f93\u5165/\u8f93\u51fa\n////////////\n\n// C++\u4f7f\u7528\u201c\u6d41\u201d\u6765\u8f93\u5165\u8f93\u51fa\u3002<<\u662f\u6d41\u7684\u63d2\u5165\u8fd0\u7b97\u7b26\uff0c>>\u662f\u6d41\u63d0\u53d6\u8fd0\u7b97\u7b26\u3002\n// cin\u3001cout\u3001\u548ccerr\u5206\u522b\u4ee3\u8868\n// stdin\uff08\u6807\u51c6\u8f93\u5165\uff09\u3001stdout\uff08\u6807\u51c6\u8f93\u51fa\uff09\u548cstderr\uff08\u6807\u51c6\u9519\u8bef\uff09\u3002\n\n#include <iostream> // \u5f15\u5165\u5305\u542b\u8f93\u5165/\u8f93\u51fa\u6d41\u7684\u5934\u6587\u4ef6\n\nusing namespace std; // \u8f93\u5165\u8f93\u51fa\u6d41\u5728std\u547d\u540d\u7a7a\u95f4\uff08\u4e5f\u5c31\u662f\u6807\u51c6\u5e93\uff09\u4e2d\u3002\n\nint main()\n{\n   int myInt;\n\n   // \u5728\u6807\u51c6\u8f93\u51fa\uff08\u7ec8\u7aef/\u663e\u793a\u5668\uff09\u4e2d\u663e\u793a\n   cout << "Enter your favorite number:\\n";\n   // \u4ece\u6807\u51c6\u8f93\u5165\uff08\u952e\u76d8\uff09\u83b7\u5f97\u4e00\u4e2a\u503c\n   cin >> myInt;\n\n   // cout\u4e5f\u63d0\u4f9b\u4e86\u683c\u5f0f\u5316\u529f\u80fd\n   cout << "Your favorite number is " << myInt << "\\n";\n   // \u663e\u793a\u201cYour favorite number is <myInt>\u201d\n\n   cerr << "Used for error messages";\n}\n\n/////////\n// \u5b57\u7b26\u4e32\n/////////\n\n// C++\u4e2d\u7684\u5b57\u7b26\u4e32\u662f\u5bf9\u8c61\uff0c\u5b83\u4eec\u6709\u5f88\u591a\u6210\u5458\u51fd\u6570\n#include <string>\n\nusing namespace std; // \u5b57\u7b26\u4e32\u4e5f\u5728std\u547d\u540d\u7a7a\u95f4\uff08\u6807\u51c6\u5e93\uff09\u4e2d\u3002\n\nstring myString = "Hello";\nstring myOtherString = " World";\n\n// + \u53ef\u4ee5\u7528\u4e8e\u8fde\u63a5\u5b57\u7b26\u4e32\u3002\ncout << myString + myOtherString; // "Hello World"\n\ncout << myString + " You"; // "Hello You"\n\n// C++\u4e2d\u7684\u5b57\u7b26\u4e32\u662f\u53ef\u53d8\u7684\uff0c\u5177\u6709\u201c\u503c\u8bed\u4e49\u201d\u3002\nmyString.append(" Dog");\ncout << myString; // "Hello Dog"\n\n\n/////////////\n// \u5f15\u7528\n/////////////\n\n// \u9664\u4e86\u652f\u6301C\u8bed\u8a00\u4e2d\u7684\u6307\u9488\u7c7b\u578b\u4ee5\u5916\uff0cC++\u8fd8\u63d0\u4f9b\u4e86_\u5f15\u7528_\u3002\n// \u5f15\u7528\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u6307\u9488\u7c7b\u578b\uff0c\u4e00\u65e6\u88ab\u5b9a\u4e49\u5c31\u4e0d\u80fd\u91cd\u65b0\u8d4b\u503c\uff0c\u5e76\u4e14\u4e0d\u80fd\u88ab\u8bbe\u7f6e\u4e3a\u7a7a\u503c\u3002\n// \u4f7f\u7528\u5f15\u7528\u65f6\u7684\u8bed\u6cd5\u4e0e\u539f\u53d8\u91cf\u76f8\u540c\uff1a\n// \u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u5f15\u7528\u7c7b\u578b\u8fdb\u884c\u89e3\u5f15\u7528\u65f6\uff0c\u4e0d\u9700\u8981\u4f7f\u7528*\uff1b\n// \u8d4b\u503c\u65f6\u4e5f\u4e0d\u9700\u8981\u7528&\u6765\u53d6\u5730\u5740\u3002\n\nusing namespace std;\n\nstring foo = "I am foo";\nstring bar = "I am bar";\n\n\nstring& fooRef = foo; // \u5efa\u7acb\u4e86\u4e00\u4e2a\u5bf9foo\u7684\u5f15\u7528\u3002\nfooRef += ". Hi!"; // \u901a\u8fc7\u5f15\u7528\u6765\u4fee\u6539foo\u7684\u503c\ncout << fooRef; // "I am foo. Hi!"\n\n// \u8fd9\u53e5\u8bdd\u7684\u5e76\u4e0d\u4f1a\u6539\u53d8fooRef\u7684\u6307\u5411\uff0c\u5176\u6548\u679c\u4e0e\u201cfoo = bar\u201d\u76f8\u540c\u3002\n// \u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6267\u884c\u8fd9\u6761\u8bed\u53e5\u4e4b\u540e\uff0cfoo == "I am bar"\u3002\nfooRef = bar;\n\nconst string& barRef = bar; // \u5efa\u7acb\u6307\u5411bar\u7684\u5e38\u91cf\u5f15\u7528\u3002\n// \u548cC\u8bed\u8a00\u4e2d\u4e00\u6837\uff0c\uff08\u6307\u9488\u548c\u5f15\u7528\uff09\u58f0\u660e\u4e3a\u5e38\u91cf\u65f6\uff0c\u5bf9\u5e94\u7684\u503c\u4e0d\u80fd\u88ab\u4fee\u6539\u3002\nbarRef += ". Hi!"; // \u8fd9\u662f\u9519\u8bef\u7684\uff0c\u4e0d\u80fd\u4fee\u6539\u4e00\u4e2a\u5e38\u91cf\u5f15\u7528\u7684\u503c\u3002\n\n///////////////////\n// \u7c7b\u4e0e\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\n///////////////////\n\n// \u6709\u5173\u7c7b\u7684\u7b2c\u4e00\u4e2a\u793a\u4f8b\n#include <iostream>\n\n// \u58f0\u660e\u4e00\u4e2a\u7c7b\u3002\n// \u7c7b\u901a\u5e38\u5728\u5934\u6587\u4ef6\uff08.h\u6216.hpp\uff09\u4e2d\u58f0\u660e\u3002\nclass Dog {\n    // \u6210\u5458\u53d8\u91cf\u548c\u6210\u5458\u51fd\u6570\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u79c1\u6709\uff08private\uff09\u7684\u3002\n    std::string name;\n    int weight;\n\n// \u5728\u8fd9\u4e2a\u6807\u7b7e\u4e4b\u540e\uff0c\u6240\u6709\u58f0\u660e\u90fd\u662f\u516c\u6709\uff08public\uff09\u7684\uff0c\n// \u76f4\u5230\u91cd\u65b0\u6307\u5b9a\u201cprivate:\u201d\uff08\u79c1\u6709\u7ee7\u627f\uff09\u6216\u201cprotected:\u201d\uff08\u4fdd\u62a4\u7ee7\u627f\uff09\u4e3a\u6b62\npublic:\n\n    // \u9ed8\u8ba4\u7684\u6784\u9020\u5668\n    Dog();\n\n    // \u8fd9\u91cc\u662f\u6210\u5458\u51fd\u6570\u58f0\u660e\u7684\u4e00\u4e2a\u4f8b\u5b50\u3002\n    // \u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u6211\u4eec\u5728\u6b64\u5904\u4f7f\u7528\u4e86std::string\uff0c\u800c\u4e0d\u662fusing namespace std\n    // \u8bed\u53e5using namespace\u7edd\u4e0d\u5e94\u5f53\u51fa\u73b0\u5728\u5934\u6587\u4ef6\u5f53\u4e2d\u3002\n    void setName(const std::string& dogsName);\n\n    void setWeight(int dogsWeight);\n\n    // \u5982\u679c\u4e00\u4e2a\u51fd\u6570\u4e0d\u5bf9\u5bf9\u8c61\u7684\u72b6\u6001\u8fdb\u884c\u4fee\u6539\uff0c\n    // \u5e94\u5f53\u5728\u58f0\u660e\u4e2d\u52a0\u4e0aconst\u3002\n    // \u8fd9\u6837\uff0c\u4f60\u5c31\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u4ee5\u5e38\u91cf\u65b9\u5f0f\u5f15\u7528\u7684\u5bf9\u8c61\u6267\u884c\u8be5\u64cd\u4f5c\u3002\n    // \u540c\u65f6\u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u5f53\u7236\u7c7b\u7684\u6210\u5458\u51fd\u6570\u9700\u8981\u88ab\u5b50\u7c7b\u91cd\u5199\u65f6\uff0c\n    // \u7236\u7c7b\u4e2d\u7684\u51fd\u6570\u5fc5\u987b\u88ab\u663e\u5f0f\u58f0\u660e\u4e3a_\u865a\u51fd\u6570\uff08virtual\uff09_\u3002\n    // \u8003\u8651\u5230\u6027\u80fd\u65b9\u9762\u7684\u56e0\u7d20\uff0c\u51fd\u6570\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u88ab\u58f0\u660e\u4e3a\u865a\u51fd\u6570\u3002\n    virtual void print() const;\n\n    // \u51fd\u6570\u4e5f\u53ef\u4ee5\u5728class body\u5185\u90e8\u5b9a\u4e49\u3002\n    // \u8fd9\u6837\u5b9a\u4e49\u7684\u51fd\u6570\u4f1a\u81ea\u52a8\u6210\u4e3a\u5185\u8054\u51fd\u6570\u3002\n    void bark() const { std::cout << name << " barks!\\n" }\n\n    // \u9664\u4e86\u6784\u9020\u5668\u4ee5\u5916\uff0cC++\u8fd8\u63d0\u4f9b\u4e86\u6790\u6784\u5668\u3002\n    // \u5f53\u4e00\u4e2a\u5bf9\u8c61\u88ab\u5220\u9664\u6216\u8005\u8131\u79bb\u5176\u5b9a\u4e49\u57df\u65f6\uff0c\u5b83\u7684\u6790\u6784\u51fd\u6570\u4f1a\u88ab\u8c03\u7528\u3002\n    // \u8fd9\u4f7f\u5f97RAII\u8fd9\u6837\u7684\u5f3a\u5927\u8303\u5f0f\uff08\u53c2\u89c1\u4e0b\u6587\uff09\u6210\u4e3a\u53ef\u80fd\u3002\n    // \u4e3a\u4e86\u884d\u751f\u51fa\u5b50\u7c7b\u6765\uff0c\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u5fc5\u987b\u5b9a\u4e49\u4e3a\u865a\u51fd\u6570\u3002\n    virtual ~Dog();\n\n}; // \u5728\u7c7b\u7684\u5b9a\u4e49\u4e4b\u540e\uff0c\u8981\u52a0\u4e00\u4e2a\u5206\u53f7\n\n// \u7c7b\u7684\u6210\u5458\u51fd\u6570\u901a\u5e38\u5728.cpp\u6587\u4ef6\u4e2d\u5b9e\u73b0\u3002\nvoid Dog::Dog()\n{\n    std::cout << "A dog has been constructed\\n";\n}\n\n// \u5bf9\u8c61\uff08\u4f8b\u5982\u5b57\u7b26\u4e32\uff09\u5e94\u5f53\u4ee5\u5f15\u7528\u7684\u5f62\u5f0f\u4f20\u9012\uff0c\n// \u5bf9\u4e8e\u4e0d\u9700\u8981\u4fee\u6539\u7684\u5bf9\u8c61\uff0c\u6700\u597d\u4f7f\u7528\u5e38\u91cf\u5f15\u7528\u3002\nvoid Dog::setName(const std::string& dogsName)\n{\n    name = dogsName;\n}\n\nvoid Dog::setWeight(int dogsWeight)\n{\n    weight = dogsWeight;\n}\n\n// \u865a\u51fd\u6570\u7684virtual\u5173\u952e\u5b57\u53ea\u9700\u8981\u5728\u58f0\u660e\u65f6\u4f7f\u7528\uff0c\u4e0d\u9700\u8981\u5728\u5b9a\u4e49\u65f6\u91cd\u590d\nvoid Dog::print() const\n{\n    std::cout << "Dog is " << name << " and weighs " << weight << "kg\\n";\n}\n\nvoid Dog::~Dog()\n{\n    std::cout << "Goodbye " << name << "\\n";\n}\n\nint main() {\n    Dog myDog; // \u6b64\u65f6\u663e\u793a\u201cA dog has been constructed\u201d\n    myDog.setName("Barkley");\n    myDog.setWeight(10);\n    myDog.print(); // \u663e\u793a\u201cDog is Barkley and weighs 10 kg\u201d\n    return 0;\n} // \u663e\u793a\u201cGoodbye Barkley\u201d\n\n// \u7ee7\u627f\uff1a\n\n// \u8fd9\u4e2a\u7c7b\u7ee7\u627f\u4e86Dog\u7c7b\u4e2d\u7684\u516c\u6709\uff08public\uff09\u548c\u4fdd\u62a4\uff08protected\uff09\u5bf9\u8c61\nclass OwnedDog : public Dog {\n\n    void setOwner(const std::string& dogsOwner)\n\n    // \u91cd\u5199OwnedDogs\u7c7b\u7684print\u65b9\u6cd5\u3002\n    // \u5982\u679c\u4f60\u4e0d\u719f\u6089\u5b50\u7c7b\u591a\u6001\u7684\u8bdd\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a\u9875\u9762\u4e2d\u7684\u6982\u8ff0\uff1a\n    // http://zh.wikipedia.org/wiki/%E5%AD%90%E7%B1%BB%E5%9E%8B\n\n    // override\u5173\u952e\u5b57\u662f\u53ef\u9009\u7684\uff0c\u5b83\u786e\u4fdd\u4f60\u6240\u91cd\u5199\u7684\u662f\u57fa\u7c7b\u4e2d\u7684\u65b9\u6cd5\u3002\n    void print() const override;\n\nprivate:\n    std::string owner;\n};\n\n// \u4e0e\u6b64\u540c\u65f6\uff0c\u5728\u5bf9\u5e94\u7684.cpp\u6587\u4ef6\u91cc\uff1a\n\nvoid OwnedDog::setOwner(const std::string& dogsOwner)\n{\n    owner = dogsOwner;\n}\n\nvoid OwnedDog::print() const\n{\n    Dog::print(); // \u8c03\u7528\u57fa\u7c7bDog\u4e2d\u7684print\u65b9\u6cd5\n    // "Dog is <name> and weights <weight>"\n\n    std::cout << "Dog is owned by " << owner << "\\n";\n    // "Dog is owned by <owner>"\n}\n\n/////////////////////\n// \u521d\u59cb\u5316\u4e0e\u8fd0\u7b97\u7b26\u91cd\u8f7d\n/////////////////////\n\n// \u5728C++\u4e2d\uff0c\u901a\u8fc7\u5b9a\u4e49\u4e00\u4e9b\u7279\u6b8a\u540d\u79f0\u7684\u51fd\u6570\uff0c\n// \u4f60\u53ef\u4ee5\u91cd\u8f7d+\u3001-\u3001*\u3001/\u7b49\u8fd0\u7b97\u7b26\u7684\u884c\u4e3a\u3002\n// \u5f53\u8fd0\u7b97\u7b26\u88ab\u4f7f\u7528\u65f6\uff0c\u8fd9\u4e9b\u7279\u6b8a\u51fd\u6570\u4f1a\u88ab\u8c03\u7528\uff0c\u4ece\u800c\u5b9e\u73b0\u8fd0\u7b97\u7b26\u91cd\u8f7d\u3002\n\n#include <iostream>\nusing namespace std;\n\nclass Point {\npublic:\n    // \u53ef\u4ee5\u4ee5\u8fd9\u6837\u7684\u65b9\u5f0f\u4e3a\u6210\u5458\u53d8\u91cf\u8bbe\u7f6e\u9ed8\u8ba4\u503c\u3002\n    double x = 0;\n    double y = 0;\n\n    // \u5b9a\u4e49\u4e00\u4e2a\u9ed8\u8ba4\u7684\u6784\u9020\u5668\u3002\n    // \u9664\u4e86\u5c06Point\u521d\u59cb\u5316\u4e3a(0, 0)\u4ee5\u5916\uff0c\u8fd9\u4e2a\u51fd\u6570\u4ec0\u4e48\u90fd\u4e0d\u505a\u3002\n    Point() { };\n\n    // \u4e0b\u9762\u4f7f\u7528\u7684\u8bed\u6cd5\u79f0\u4e3a\u521d\u59cb\u5316\u5217\u8868\uff0c\n    // \u8fd9\u662f\u521d\u59cb\u5316\u7c7b\u4e2d\u6210\u5458\u53d8\u91cf\u7684\u6b63\u786e\u65b9\u5f0f\u3002\n    Point (double a, double b) :\n        x(a),\n        y(b)\n    { /* \u9664\u4e86\u521d\u59cb\u5316\u6210\u5458\u53d8\u91cf\u5916\uff0c\u4ec0\u4e48\u90fd\u4e0d\u505a */ }\n\n    // \u91cd\u8f7d + \u8fd0\u7b97\u7b26\n    Point operator+(const Point& rhs) const;\n\n    // \u91cd\u8f7d += \u8fd0\u7b97\u7b26\n    Point& operator+=(const Point& rhs);\n\n    // \u589e\u52a0 - \u548c -= \u8fd0\u7b97\u7b26\u4e5f\u662f\u6709\u610f\u4e49\u7684\uff0c\u4f46\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\n};\n\nPoint Point::operator+(const Point& rhs) const\n{\n    // \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u70b9\uff0c\n    // \u5176\u6a2a\u7eb5\u5750\u6807\u5206\u522b\u4e3a\u8fd9\u4e2a\u70b9\u4e0e\u53e6\u4e00\u70b9\u5728\u5bf9\u5e94\u65b9\u5411\u4e0a\u7684\u5750\u6807\u4e4b\u548c\u3002\n    return Point(x + rhs.x, y + rhs.y);\n}\n\nPoint& Point::operator+=(const Point& rhs)\n{\n    x += rhs.x;\n    y += rhs.y;\n    return *this;\n}\n\nint main () {\n    Point up (0,1);\n    Point right (1,0);\n    // \u8fd9\u91cc\u4f7f\u7528\u4e86Point\u7c7b\u578b\u7684\u8fd0\u7b97\u7b26\u201c+\u201d\n    // \u8c03\u7528up\uff08Point\u7c7b\u578b\uff09\u7684\u201c+\u201d\u65b9\u6cd5\uff0c\u5e76\u4ee5right\u4f5c\u4e3a\u51fd\u6570\u7684\u53c2\u6570\n    Point result = up + right;\n    // \u663e\u793a\u201cResult is upright (1,1)\u201d\n    cout << "Result is upright (" << result.x << \',\' << result.y << ")\\n";\n    return 0;\n}\n\n///////////\n// \u5f02\u5e38\u5904\u7406\n///////////\n\n// \u6807\u51c6\u5e93\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e9b\u57fa\u672c\u7684\u5f02\u5e38\u7c7b\u578b\n// \uff08\u53c2\u89c1http://en.cppreference.com/w/cpp/error/exception\uff09\n// \u4f46\u662f\uff0c\u5176\u4ed6\u4efb\u4f55\u7c7b\u578b\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5f02\u5e38\u88ab\u62cb\u51fa\n#include <exception>\n\n// \u5728_try_\u4ee3\u7801\u5757\u4e2d\u62cb\u51fa\u7684\u5f02\u5e38\u53ef\u4ee5\u88ab\u968f\u540e\u7684_catch_\u6355\u83b7\u3002\ntry {\n    // \u4e0d\u8981\u7528 _new_\u5173\u952e\u5b57\u5728\u5806\u4e0a\u4e3a\u5f02\u5e38\u5206\u914d\u7a7a\u95f4\u3002\n    throw std::exception("A problem occurred");\n}\n// \u5982\u679c\u62cb\u51fa\u7684\u5f02\u5e38\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u53ef\u4ee5\u7528\u5e38\u91cf\u5f15\u7528\u6765\u6355\u83b7\u5b83\ncatch (const std::exception& ex)\n{\n  std::cout << ex.what();\n// \u6355\u83b7\u5c1a\u672a\u88ab_catch_\u5904\u7406\u7684\u6240\u6709\u9519\u8bef\n} catch (...)\n{\n    std::cout << "Unknown exception caught";\n    throw; // \u91cd\u65b0\u62cb\u51fa\u5f02\u5e38\n}\n\n///////\n// RAII\n///////\n\n// RAII\u6307\u7684\u662f\u201c\u8d44\u6e90\u83b7\u53d6\u5c31\u662f\u521d\u59cb\u5316\u201d\uff08Resource Allocation Is Initialization\uff09\uff0c\n// \u5b83\u88ab\u89c6\u4f5cC++\u4e2d\u6700\u5f3a\u5927\u7684\u7f16\u7a0b\u8303\u5f0f\u4e4b\u4e00\u3002\n// \u7b80\u5355\u8bf4\u6765\uff0c\u5b83\u6307\u7684\u662f\uff0c\u7528\u6784\u9020\u51fd\u6570\u6765\u83b7\u53d6\u4e00\u4e2a\u5bf9\u8c61\u7684\u8d44\u6e90\uff0c\n// \u76f8\u5e94\u7684\uff0c\u501f\u52a9\u6790\u6784\u51fd\u6570\u6765\u91ca\u653e\u5bf9\u8c61\u7684\u8d44\u6e90\u3002\n\n// \u4e3a\u4e86\u7406\u89e3\u8fd9\u4e00\u8303\u5f0f\u7684\u7528\u5904\uff0c\u8ba9\u6211\u4eec\u8003\u8651\u67d0\u4e2a\u51fd\u6570\u4f7f\u7528\u6587\u4ef6\u53e5\u67c4\u65f6\u7684\u60c5\u51b5\uff1a\nvoid doSomethingWithAFile(const char* filename)\n{\n    // \u9996\u5148\uff0c\u8ba9\u6211\u4eec\u5047\u8bbe\u4e00\u5207\u90fd\u4f1a\u987a\u5229\u8fdb\u884c\u3002\n\n    FILE* fh = fopen(filename, "r"); // \u4ee5\u53ea\u8bfb\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\n\n    doSomethingWithTheFile(fh);\n    doSomethingElseWithIt(fh);\n\n    fclose(fh); // \u5173\u95ed\u6587\u4ef6\u53e5\u67c4\n}\n\n// \u4e0d\u5e78\u7684\u662f\uff0c\u968f\u7740\u9519\u8bef\u5904\u7406\u673a\u5236\u7684\u5f15\u5165\uff0c\u4e8b\u60c5\u4f1a\u53d8\u5f97\u590d\u6742\u3002\n// \u5047\u8bbefopen\u51fd\u6570\u6709\u53ef\u80fd\u6267\u884c\u5931\u8d25\uff0c\n// \u800cdoSomethingWithTheFile\u548cdoSomethingElseWithIt\u4f1a\u5728\u5931\u8d25\u65f6\u8fd4\u56de\u9519\u8bef\u4ee3\u7801\u3002\n// \uff08\u867d\u7136\u5f02\u5e38\u662fC++\u4e2d\u5904\u7406\u9519\u8bef\u7684\u63a8\u8350\u65b9\u5f0f\uff0c\n// \u4f46\u662f\u67d0\u4e9b\u7a0b\u5e8f\u5458\uff0c\u5c24\u5176\u662f\u6709C\u8bed\u8a00\u80cc\u666f\u7684\uff0c\u5e76\u4e0d\u8ba4\u53ef\u5f02\u5e38\u6355\u83b7\u673a\u5236\u7684\u4f5c\u7528\uff09\u3002\n// \u73b0\u5728\uff0c\u6211\u4eec\u5fc5\u987b\u68c0\u67e5\u6bcf\u4e2a\u51fd\u6570\u8c03\u7528\u662f\u5426\u6210\u529f\u6267\u884c\uff0c\u5e76\u5728\u95ee\u9898\u53d1\u751f\u7684\u65f6\u5019\u5173\u95ed\u6587\u4ef6\u53e5\u67c4\u3002\nbool doSomethingWithAFile(const char* filename)\n{\n    FILE* fh = fopen(filename, "r"); // \u4ee5\u53ea\u8bfb\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\n    if (fh == nullptr) // \u5f53\u6267\u884c\u5931\u8d25\u662f\uff0c\u8fd4\u56de\u7684\u6307\u9488\u662fnullptr\n        return false; // \u5411\u8c03\u7528\u8005\u6c47\u62a5\u9519\u8bef\n\n    // \u5047\u8bbe\u6bcf\u4e2a\u51fd\u6570\u4f1a\u5728\u6267\u884c\u5931\u8d25\u65f6\u8fd4\u56defalse\n    if (!doSomethingWithTheFile(fh)) {\n        fclose(fh); // \u5173\u95ed\u6587\u4ef6\u53e5\u67c4\uff0c\u907f\u514d\u9020\u6210\u5185\u5b58\u6cc4\u6f0f\u3002\n        return false; // \u53cd\u9988\u9519\u8bef\n    }\n    if (!doSomethingElseWithIt(fh)) {\n        fclose(fh); // \u5173\u95ed\u6587\u4ef6\u53e5\u67c4\n        return false; // \u53cd\u9988\u9519\u8bef\n    }\n\n    fclose(fh); // \u5173\u95ed\u6587\u4ef6\u53e5\u67c4\n    return true; // \u6307\u793a\u51fd\u6570\u5df2\u6210\u529f\u6267\u884c\n}\n\n// C\u8bed\u8a00\u7684\u7a0b\u5e8f\u5458\u901a\u5e38\u4f1a\u501f\u52a9goto\u8bed\u53e5\u7b80\u5316\u4e0a\u9762\u7684\u4ee3\u7801\uff1a\nbool doSomethingWithAFile(const char* filename)\n{\n    FILE* fh = fopen(filename, "r");\n    if (fh == nullptr)\n        return false;\n\n    if (!doSomethingWithTheFile(fh))\n        goto failure;\n\n    if (!doSomethingElseWithIt(fh))\n        goto failure;\n\n    fclose(fh); // \u5173\u95ed\u6587\u4ef6\n    return true; // \u6267\u884c\u6210\u529f\n\nfailure:\n    fclose(fh);\n    return false; // \u53cd\u9988\u9519\u8bef\n}\n\n// \u5982\u679c\u7528\u5f02\u5e38\u6355\u83b7\u673a\u5236\u6765\u6307\u793a\u9519\u8bef\u7684\u8bdd\uff0c\n// \u4ee3\u7801\u4f1a\u53d8\u5f97\u6e05\u6670\u4e00\u4e9b\uff0c\u4f46\u662f\u4ecd\u7136\u6709\u4f18\u5316\u7684\u4f59\u5730\u3002\nvoid doSomethingWithAFile(const char* filename)\n{\n    FILE* fh = fopen(filename, "r"); // \u4ee5\u53ea\u8bfb\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\n    if (fh == nullptr)\n        throw std::exception("Could not open the file.");\n\n    try {\n        doSomethingWithTheFile(fh);\n        doSomethingElseWithIt(fh);\n    }\n    catch (...) {\n        fclose(fh); // \u4fdd\u8bc1\u51fa\u9519\u7684\u65f6\u5019\u6587\u4ef6\u88ab\u6b63\u786e\u5173\u95ed\n        throw; // \u4e4b\u540e\uff0c\u91cd\u65b0\u629b\u51fa\u8fd9\u4e2a\u5f02\u5e38\n    }\n\n    fclose(fh); // \u5173\u95ed\u6587\u4ef6\n    // \u6240\u6709\u5de5\u4f5c\u987a\u5229\u5b8c\u6210\n}\n\n// \u76f8\u6bd4\u4e4b\u4e0b\uff0c\u4f7f\u7528C++\u4e2d\u7684\u6587\u4ef6\u6d41\u7c7b\uff08fstream\uff09\u65f6\uff0c\n// fstream\u4f1a\u5229\u7528\u81ea\u5df1\u7684\u6790\u6784\u5668\u6765\u5173\u95ed\u6587\u4ef6\u53e5\u67c4\u3002\n// \u53ea\u8981\u79bb\u5f00\u4e86\u67d0\u4e00\u5bf9\u8c61\u7684\u5b9a\u4e49\u57df\uff0c\u5b83\u7684\u6790\u6784\u51fd\u6570\u5c31\u4f1a\u88ab\u81ea\u52a8\u8c03\u7528\u3002\nvoid doSomethingWithAFile(const std::string& filename)\n{\n    // ifstream\u662f\u8f93\u5165\u6587\u4ef6\u6d41\uff08input file stream\uff09\u7684\u7b80\u79f0\n    std::ifstream fh(filename); // \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\n\n    // \u5bf9\u6587\u4ef6\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\n    doSomethingWithTheFile(fh);\n    doSomethingElseWithIt(fh);\n\n} // \u6587\u4ef6\u5df2\u7ecf\u88ab\u6790\u6784\u5668\u81ea\u52a8\u5173\u95ed\n\n// \u4e0e\u4e0a\u9762\u51e0\u79cd\u65b9\u5f0f\u76f8\u6bd4\uff0c\u8fd9\u79cd\u65b9\u5f0f\u6709\u7740_\u660e\u663e_\u7684\u4f18\u52bf\uff1a\n// 1. \u65e0\u8bba\u53d1\u751f\u4e86\u4ec0\u4e48\u60c5\u51b5\uff0c\u8d44\u6e90\uff08\u6b64\u4f8b\u5f53\u4e2d\u662f\u6587\u4ef6\u53e5\u67c4\uff09\u90fd\u4f1a\u88ab\u6b63\u786e\u5173\u95ed\u3002\n//    \u53ea\u8981\u4f60\u6b63\u786e\u4f7f\u7528\u4e86\u6790\u6784\u5668\uff0c\u5c31_\u4e0d\u4f1a_\u56e0\u4e3a\u5fd8\u8bb0\u5173\u95ed\u53e5\u67c4\uff0c\u9020\u6210\u8d44\u6e90\u7684\u6cc4\u6f0f\u3002\n// 2. \u53ef\u4ee5\u6ce8\u610f\u5230\uff0c\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u5199\u51fa\u6765\u7684\u4ee3\u7801\u5341\u5206\u7b80\u6d01\u3002\n//    \u6790\u6784\u5668\u4f1a\u5728\u540e\u53f0\u5173\u95ed\u6587\u4ef6\u53e5\u67c4\uff0c\u4e0d\u518d\u9700\u8981\u4f60\u6765\u64cd\u5fc3\u8fd9\u4e9b\u7410\u4e8b\u3002\n// 3. \u8fd9\u79cd\u65b9\u5f0f\u7684\u4ee3\u7801\u5177\u6709\u5f02\u5e38\u5b89\u5168\u6027\u3002\n//    \u65e0\u8bba\u5728\u51fd\u6570\u4e2d\u7684\u4f55\u5904\u62cb\u51fa\u5f02\u5e38\uff0c\u90fd\u4e0d\u4f1a\u963b\u788d\u5bf9\u6587\u4ef6\u8d44\u6e90\u7684\u91ca\u653e\u3002\n\n// \u5730\u9053\u7684C++\u4ee3\u7801\u5e94\u5f53\u628aRAII\u7684\u4f7f\u7528\u6269\u5c55\u5230\u5404\u79cd\u7c7b\u578b\u7684\u8d44\u6e90\u4e0a\uff0c\u5305\u62ec\uff1a\n// - \u7528unique_ptr\u548cshared_ptr\u7ba1\u7406\u7684\u5185\u5b58\n// - \u5404\u79cd\u6570\u636e\u5bb9\u5668\uff0c\u4f8b\u5982\u6807\u51c6\u5e93\u4e2d\u7684\u94fe\u8868\u3001\u5411\u91cf\uff08\u5bb9\u91cf\u81ea\u52a8\u6269\u5c55\u7684\u6570\u7ec4\uff09\u3001\u6563\u5217\u8868\u7b49\uff1b\n//   \u5f53\u5b83\u4eec\u8131\u79bb\u4f5c\u7528\u57df\u65f6\uff0c\u6790\u6784\u5668\u4f1a\u81ea\u52a8\u91ca\u653e\u5176\u4e2d\u50a8\u5b58\u7684\u5185\u5bb9\u3002\n// - \u7528lock_guard\u548cunique_lock\u5b9e\u73b0\u7684\u4e92\u65a5\n')),(0,i.yg)("p",null,"\u6269\u5c55\u9605\u8bfb\uff1a"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"http://cppreference.com/w/cpp"},"CPP Reference")," \u63d0\u4f9b\u4e86\u6700\u65b0\u7684\u8bed\u6cd5\u53c2\u8003\u3002"),(0,i.yg)("li",{parentName:"ul"},"\u53ef\u4ee5\u5728 ",(0,i.yg)("a",{parentName:"li",href:"http://cplusplus.com/"},"CPlusPlus")," \u627e\u5230\u4e00\u4e9b\u8865\u5145\u8d44\u6599\u3002"),(0,i.yg)("li",{parentName:"ul"},"\u53ef\u4ee5\u5728 ","[TheChernoProject - C ++]","(",(0,i.yg)("a",{parentName:"li",href:"https://www.youtube.com/playlist?list=PLlrATfBNZ98dudnM48yfGUldqGD0S4FFb%EF%BC%89%E4%B8%8A%E6%89%BE%E5%88%B0%E6%B6%B5%E7%9B%96%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%92%8C%E8%AE%BE%E7%BD%AE%E7%BC%96%E7%A0%81%E7%8E%AF%E5%A2%83%E7%9A%84%E6%95%99%E7%A8%8B%E3%80%82"},"https://www.youtube.com/playlist?list=PLlrATfBNZ98dudnM48yfGUldqGD0S4FFb\uff09\u4e0a\u627e\u5230\u6db5\u76d6\u8bed\u8a00\u57fa\u7840\u548c\u8bbe\u7f6e\u7f16\u7801\u73af\u5883\u7684\u6559\u7a0b\u3002"))))}d.isMDXComponent=!0}}]);